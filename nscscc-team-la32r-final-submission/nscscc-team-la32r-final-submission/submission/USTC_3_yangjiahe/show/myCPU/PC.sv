// Generated by CIRCT firtool-1.62.0
module PC(
  input         clock,
                reset,
                io_stall,
  output [31:0] io_pc,
                io_npc,
  output        io_inst_valid_0,
                io_inst_valid_1,
  output [7:0]  io_exception,
  input         io_pred_jump_0,
                io_pred_jump_1,
  input  [31:0] io_pred_npc,
  input         io_predict_fail,
  input  [31:0] io_branch_target,
  input         io_pd_fix_en,
  input  [31:0] io_pd_fix_target,
  input         io_idle_start,
                io_idle_intr
);

  reg  [31:0] pc;
  reg         idle;
  wire [1:0]  _npc_T = {io_pred_jump_1, io_pred_jump_0};
  wire [31:0] _npc_T_2 = 32'(pc + 32'h8);
  wire [31:0] _npc_T_5 = {_npc_T_2[31:3], 3'h0};
  wire [31:0] _npc_T_6 = (|_npc_T) ? io_pred_npc : _npc_T_5;
  wire [31:0] _GEN = io_stall ? pc : _npc_T_6;
  wire [31:0] _GEN_0 = io_pd_fix_en ? io_pd_fix_target : _GEN;
  wire [31:0] _GEN_1 = io_predict_fail ? io_branch_target : _GEN_0;
  wire        _GEN_2 = idle ? idle : io_idle_start;
  always @(posedge clock) begin
    if (reset) begin
      pc <= 32'h1C000000;
      idle <= 1'h0;
    end
    else begin
      if (idle) begin
      end
      else if (io_predict_fail)
        pc <= io_branch_target;
      else if (io_pd_fix_en)
        pc <= io_pd_fix_target;
      else if (io_stall) begin
      end
      else if (|_npc_T)
        pc <= io_pred_npc;
      else
        pc <= _npc_T_5;
      idle <= ~io_idle_intr & _GEN_2;
    end
  end // always @(posedge)
  assign io_pc = pc;
  assign io_npc = idle ? pc : _GEN_1;
  assign io_inst_valid_0 = ~idle;
  assign io_inst_valid_1 = ~idle & ~io_pred_jump_0 & ~(pc[2]);
  assign io_exception = pc[1:0] == 2'h0 ? 8'h0 : 8'h88;
endmodule

