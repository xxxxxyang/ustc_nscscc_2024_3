// Generated by CIRCT firtool-1.62.0
module MMU(
  input         clock,
                reset,
  input  [9:0]  io_csr_asid,
  input  [1:0]  io_csr_plv,
  input  [18:0] io_csr_tlbehi,
  input  [3:0]  io_csr_tlbidx,
  input  [31:0] io_csr_dmw0,
                io_csr_dmw1,
  input  [5:0]  io_csr_crmd_trans,
  input         io_i_valid,
  input  [31:0] io_i_vaddr,
  input         io_i_stall,
  output [31:0] io_i_paddr,
  output        io_i_uncache,
  output [7:0]  io_i_exception,
  input         io_d_rvalid,
                io_d_wvalid,
  input  [31:0] io_d_vaddr,
  input         io_d_stall,
  output [31:0] io_d_paddr,
  output        io_d_uncache,
  output [7:0]  io_d_exception,
  output [3:0]  io_tlbsrch_idx,
  output        io_tlbsrch_hit,
  input  [18:0] io_tlbwr_entry_vppn,
  input  [5:0]  io_tlbwr_entry_ps,
  input         io_tlbwr_entry_g,
  input  [9:0]  io_tlbwr_entry_asid,
  input         io_tlbwr_entry_e,
  input  [19:0] io_tlbwr_entry_ppn0,
  input  [1:0]  io_tlbwr_entry_plv0,
                io_tlbwr_entry_mat0,
  input         io_tlbwr_entry_d0,
                io_tlbwr_entry_v0,
  input  [19:0] io_tlbwr_entry_ppn1,
  input  [1:0]  io_tlbwr_entry_plv1,
                io_tlbwr_entry_mat1,
  input         io_tlbwr_entry_d1,
                io_tlbwr_entry_v1,
                io_tlbwr_en,
  input  [3:0]  io_tlbfill_idx,
  input         io_tlbfill_en,
                io_invtlb_en,
  input  [4:0]  io_invtlb_op,
  input  [9:0]  io_invtlb_asid,
  input  [31:0] io_invtlb_vaddr
);

  wire [31:0] _tlb_io_i_tlb_paddr;
  wire        _tlb_io_i_tlb_uncache;
  wire [7:0]  _tlb_io_i_tlb_exception;
  wire [31:0] _tlb_io_d_tlb_paddr;
  wire        _tlb_io_d_tlb_uncache;
  wire [7:0]  _tlb_io_d_tlb_exception;
  reg  [31:0] dmw0_reg;
  reg  [31:0] dmw1_reg;
  wire [3:0]  _GEN = {2'h0, io_csr_plv};
  wire [3:0]  _i_dmw0_hit_T_5 = dmw0_reg[3:0] >> _GEN;
  wire        i_dmw0_hit =
    (io_i_vaddr[31:29] ^ dmw0_reg[31:29]) == 3'h0 & _i_dmw0_hit_T_5[0];
  wire [3:0]  _i_dmw1_hit_T_5 = dmw1_reg[3:0] >> _GEN;
  wire        i_dmw1_hit =
    (io_i_vaddr[31:29] ^ dmw1_reg[31:29]) == 3'h0 & _i_dmw1_hit_T_5[0];
  wire        _io_i_uncache_T_5 = i_dmw1_hit ? ~(dmw1_reg[4]) : _tlb_io_i_tlb_uncache;
  wire        _io_i_uncache_T_6 = i_dmw0_hit ? ~(dmw0_reg[4]) : _io_i_uncache_T_5;
  wire [31:0] _io_i_paddr_T_7 =
    i_dmw1_hit ? {dmw1_reg[27:25], io_i_vaddr[28:0]} : _tlb_io_i_tlb_paddr;
  wire [31:0] _io_i_paddr_T_8 =
    i_dmw0_hit ? {dmw0_reg[27:25], io_i_vaddr[28:0]} : _io_i_paddr_T_7;
  reg         i_exception_ne;
  reg  [1:0]  plv_reg;
  reg         da_reg;
  wire [3:0]  _GEN_0 = {2'h0, plv_reg};
  wire [3:0]  _d_dmw0_hit_T_5 = dmw0_reg[3:0] >> _GEN_0;
  wire        d_dmw0_hit =
    (io_d_vaddr[31:29] ^ dmw0_reg[31:29]) == 3'h0 & _d_dmw0_hit_T_5[0];
  wire [3:0]  _d_dmw1_hit_T_5 = dmw1_reg[3:0] >> _GEN_0;
  wire        d_dmw1_hit =
    (io_d_vaddr[31:29] ^ dmw1_reg[31:29]) == 3'h0 & _d_dmw1_hit_T_5[0];
  wire [31:0] _io_d_paddr_T_6 =
    d_dmw1_hit ? {dmw1_reg[27:25], io_d_vaddr[28:0]} : _tlb_io_d_tlb_paddr;
  wire [31:0] _io_d_paddr_T_7 =
    d_dmw0_hit ? {dmw0_reg[27:25], io_d_vaddr[28:0]} : _io_d_paddr_T_6;
  wire        _io_d_uncache_T_4 = d_dmw1_hit ? ~(dmw1_reg[4]) : _tlb_io_d_tlb_uncache;
  wire        _io_d_uncache_T_5 = d_dmw0_hit ? ~(dmw0_reg[4]) : _io_d_uncache_T_4;
  always @(posedge clock) begin
    dmw0_reg <= io_csr_dmw0;
    dmw1_reg <= io_csr_dmw1;
    plv_reg <= io_csr_plv;
    da_reg <= io_csr_crmd_trans[0];
    if (reset)
      i_exception_ne <= 1'h0;
    else if (io_i_stall) begin
    end
    else
      i_exception_ne <= io_csr_crmd_trans[0] | i_dmw0_hit | i_dmw1_hit;
  end // always @(posedge)
  TLB tlb (
    .clock               (clock),
    .reset               (reset),
    .io_csr_asid         (io_csr_asid),
    .io_csr_plv          (io_csr_plv),
    .io_csr_tlbehi       (io_csr_tlbehi),
    .io_csr_tlbidx       (io_csr_tlbidx),
    .io_i_valid          (io_i_valid),
    .io_i_vaddr          (io_i_vaddr),
    .io_i_stall          (io_i_stall),
    .io_i_tlb_paddr      (_tlb_io_i_tlb_paddr),
    .io_i_tlb_uncache    (_tlb_io_i_tlb_uncache),
    .io_i_tlb_exception  (_tlb_io_i_tlb_exception),
    .io_d_rvalid         (io_d_rvalid),
    .io_d_wvalid         (io_d_wvalid),
    .io_d_vaddr          (io_d_vaddr),
    .io_d_stall          (io_d_stall),
    .io_d_tlb_paddr      (_tlb_io_d_tlb_paddr),
    .io_d_tlb_uncache    (_tlb_io_d_tlb_uncache),
    .io_d_tlb_exception  (_tlb_io_d_tlb_exception),
    .io_tlbsrch_idx      (io_tlbsrch_idx),
    .io_tlbsrch_hit      (io_tlbsrch_hit),
    .io_tlbwr_entry_vppn (io_tlbwr_entry_vppn),
    .io_tlbwr_entry_ps   (io_tlbwr_entry_ps),
    .io_tlbwr_entry_g    (io_tlbwr_entry_g),
    .io_tlbwr_entry_asid (io_tlbwr_entry_asid),
    .io_tlbwr_entry_e    (io_tlbwr_entry_e),
    .io_tlbwr_entry_ppn0 (io_tlbwr_entry_ppn0),
    .io_tlbwr_entry_plv0 (io_tlbwr_entry_plv0),
    .io_tlbwr_entry_mat0 (io_tlbwr_entry_mat0),
    .io_tlbwr_entry_d0   (io_tlbwr_entry_d0),
    .io_tlbwr_entry_v0   (io_tlbwr_entry_v0),
    .io_tlbwr_entry_ppn1 (io_tlbwr_entry_ppn1),
    .io_tlbwr_entry_plv1 (io_tlbwr_entry_plv1),
    .io_tlbwr_entry_mat1 (io_tlbwr_entry_mat1),
    .io_tlbwr_entry_d1   (io_tlbwr_entry_d1),
    .io_tlbwr_entry_v1   (io_tlbwr_entry_v1),
    .io_tlbwr_en         (io_tlbwr_en),
    .io_tlbfill_idx      (io_tlbfill_idx),
    .io_tlbfill_en       (io_tlbfill_en),
    .io_invtlb_en        (io_invtlb_en),
    .io_invtlb_op        (io_invtlb_op),
    .io_invtlb_asid      (io_invtlb_asid),
    .io_invtlb_vaddr     (io_invtlb_vaddr)
  );
  assign io_i_paddr = io_csr_crmd_trans[0] ? io_i_vaddr : _io_i_paddr_T_8;
  assign io_i_uncache =
    io_csr_crmd_trans[0]
      ? io_i_vaddr[31:16] == 16'hBFAF | io_i_vaddr[31:16] == 16'h1FAF
      : _io_i_uncache_T_6;
  assign io_i_exception = i_exception_ne ? 8'h0 : _tlb_io_i_tlb_exception;
  assign io_d_paddr = da_reg ? io_d_vaddr : _io_d_paddr_T_7;
  assign io_d_uncache =
    da_reg
      ? io_d_vaddr[31:16] == 16'hBFAF | io_d_vaddr[31:16] == 16'h1FAF
      : _io_d_uncache_T_5;
  assign io_d_exception =
    da_reg | d_dmw0_hit | d_dmw1_hit ? 8'h0 : _tlb_io_d_tlb_exception;
endmodule

